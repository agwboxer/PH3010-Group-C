# -*- coding: utf-8 -*-
"""
Created on Fri Nov  1 14:43:24 2024

@author: oliver
"""

#WARNING: potentially alot of steps for some laptops

import matplotlib.pyplot as plt
import numpy as np

#initial conditions, all initial values taken at the perihelion in standard astronomical units
xi = -0.307278      # inital x position taken as the semi major of mercurys orbit minus this value times the orbital eccentricity
yi = 0.0            # Initial y value
xs = 0.0            # x position of sun
ys = 0.0            # y position of sun
vix = 0             # Initial x velocity of mercury 
viy = 12.0          # Initial y velocity of mercury 
Ms = 1.0            # Mass of the sun in solar mass units 
G = 4*np.pi**2      # Gravitational constant G 
a = 0.387           # Semi major distance
Tsq = a**3          # Orbit Period squared
T = np.sqrt(Tsq)    # Orbit period

steps = 25000         # Number of steps plotted over, an increase in the number of steps makes the orbit more and more correct, and the orbits begins to overlap with itself
dt = T/steps        # Length of a step defined by the period and how many steps there are 
t = np.arange(0.0, T, dt)   #array of each step up to the period

def radius(x, y):
    """
    Parameters
    ----------
    x : x position of mercury
    y : y position of mercury
    Returns
    -------
    current radius of the star
    """
    return np.sqrt(x**2 + y**2)

def SecondDev(position, xpos, ypos):
    """
    Parameters
    ----------
    position : the position of whatever variable you want the acceleration of, e.g. xpos or ypos
    xpos : the x position of mercury
    ypos : the y position of mercury
    Returns
    -------
    2nd derivative of x or y with respect to time
    """
    return -G * Ms * (position - xs)/(radius(xpos, ypos))**3

def EulerFirst(x0, v0):
    """
    Parameters
    ----------
    x0 : initial x or y position in the equation for eulers method x(n+1) = x(n) + dt*xdot(n)
    v0 :initial velocity in x or y, xdot(n) in the equation above
    Returns
    -------
    position in x or y after an increment of time dt
    """
    return x0 + dt*v0

def EulerSecond(v0, f):
    """
    Parameters
    ----------
    v0 = inital x or y velocty in equation for eulers method xdot(n+1) = xdot(n) + dt*function(x)
    f = function that describes the x or y acceleration of the object as a function of x or y 
    Returns
    -------
    velocity in x or y after an increment of time dt
    """
    return v0 + dt*f

#creating empty lists to append the values to
xpos_list = []
ypos_list =[]
vx_list = []
vy_list = []

#setting the variables to the initial values so that they can be implemented to Euler
vx = vix
vy = viy
xpos = xi
ypos = yi

# Set all of the variables in base_var so that wen theyre changed in the below loop, they dont affect each other before the end of the loop and n goes to n+1
base_vars = xpos, ypos, vx, vy


# loop over the amount of steps to find the x and y position and velocity at each time increment
for i ,val in enumerate(t):
    # finding the x data (position and velocty)
    vx = EulerSecond(base_vars[2], SecondDev(base_vars[0], base_vars[0], base_vars[1]))     #velocity of x(n+1), x after a dt, call base_var[index] as x_o and vx_0
    xpos = EulerFirst(base_vars[0], base_vars[2])                                           #position of x(n+1).
    vx_list.append(vx)                                                                      #Append the velocity and then the positions to the list
    xpos_list.append(xpos)
    
    # finding the y data (position and velocity)
    vy = EulerSecond(base_vars[3], SecondDev(base_vars[1], base_vars[0], base_vars[1]))     #velocity of x(n+1), x after a dt
    ypos = EulerFirst(base_vars[1], base_vars[3])
    vy_list.append(vy)
    ypos_list.append(ypos)
    
    #change all the variables to their new values for the beginning of the next loop
    base_vars = xpos, ypos, vx, vy


# Plot the orbit and the sun    
plt.figure()
plt.plot(xpos_list, ypos_list)
plt.scatter(xs, ys, marker='o', label='Sun', color = 'orange')
plt.legend()
