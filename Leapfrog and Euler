import matplotlib.pyplot as plt
import numpy as np

# Constants and Initial Conditions (in AU and years)
xi = -0.307278     # Initial x position (perihelion) in AU
yi = 0.0           # Initial y position in AU
xs = 0.0           # Sun's x position
ys = 0.0           # Sun's y position
vix = 0            # Initial x velocity of Mercury in AU/year
viy = 12.0         # Initial y velocity of Mercury in AU/year
Ms = 1.0           # Mass of the Sun in solar mass units
G = 4 * np.pi**2   # Gravitational constant G in AU^3 / (year^2 * solar mass)

# Orbital parameters
a = 0.387               # Semi-major axis distance of Mercury in AU
T = np.sqrt(a**3)       # Orbital period in years
T_final = 10 * T        # Simulate for 10 orbital periods to see divergence

# Reduced number of steps for visibility of divergence
steps = 1000
dt = T_final / steps    # Time step in years
t = np.arange(0.0, T_final, dt)  # Time array up to 10 periods

# Function to calculate gravitational acceleration
def radius(x, y):
    return np.sqrt(x**2 + y**2)

def acceleration(position, xpos, ypos):
    r = radius(xpos, ypos)
    return -G * Ms * position / r**3

# ------------------- Euler Method Implementation -------------------

# Re-initialize initial conditions for Euler
xpos_euler, ypos_euler = [xi], [yi]
vx_euler, vy_euler = vix, viy

for _ in range(steps - 1):
    # Calculate accelerations at current position
    ax_euler = acceleration(xpos_euler[-1], xpos_euler[-1], ypos_euler[-1])
    ay_euler = acceleration(ypos_euler[-1], xpos_euler[-1], ypos_euler[-1])

    # Update velocities and positions using Euler method
    vx_euler += ax_euler * dt
    vy_euler += ay_euler * dt
    xpos_euler.append(xpos_euler[-1] + vx_euler * dt)
    ypos_euler.append(ypos_euler[-1] + vy_euler * dt)

# ------------------- Leapfrog Method Implementation -------------------

# Re-initialize initial conditions for Leapfrog
xpos_leapfrog, ypos_leapfrog = [xi], [yi]
vx_leapfrog, vy_leapfrog = vix, viy

for _ in range(steps - 1):
    # Calculate acceleration at current position
    ax = acceleration(xpos_leapfrog[-1], xpos_leapfrog[-1], ypos_leapfrog[-1])
    ay = acceleration(ypos_leapfrog[-1], xpos_leapfrog[-1], ypos_leapfrog[-1])

    # Kick: Update velocity to midpoint
    vx_mid = vx_leapfrog + 0.5 * ax * dt
    vy_mid = vy_leapfrog + 0.5 * ay * dt

    # Drift: Update position with midpoint velocity
    xpos_leapfrog.append(xpos_leapfrog[-1] + vx_mid * dt)
    ypos_leapfrog.append(ypos_leapfrog[-1] + vy_mid * dt)

    # Calculate new acceleration at updated position
    ax_new = acceleration(xpos_leapfrog[-1], xpos_leapfrog[-1], ypos_leapfrog[-1])
    ay_new = acceleration(ypos_leapfrog[-1], xpos_leapfrog[-1], ypos_leapfrog[-1])

    # Kick: Final update to velocity
    vx_leapfrog = vx_mid + 0.5 * ax_new * dt
    vy_leapfrog = vy_mid + 0.5 * ay_new * dt

# Plot both orbits on the same plot
plt.figure(figsize=(7, 9))
plt.plot(xpos_euler, ypos_euler, label="Euler's Method", linestyle='--', color='blue', alpha=0.7)
plt.plot(xpos_leapfrog, ypos_leapfrog, label="Leapfrog Integration", color='green')
plt.scatter(xs, ys, color='orange', marker='o', label='Sun')
plt.xlabel("x (AU)")
plt.ylabel("y (AU)")
plt.title("Comparison of Mercury's orbit with different methods over 10 orbits")
plt.legend()
plt.axis('equal')
#plt.grid(True)
plt.show()
